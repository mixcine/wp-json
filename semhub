local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local StarterGui = game:GetService("StarterGui")

-- Carregar a biblioteca
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/ndark5243-arch/Libraryhanzodred/refs/heads/main/Main.txt"))()

-- Configura√ß√µes iniciais
workspace.FallenPartsDestroyHeight = -math.huge

-- Criar a janela principal
local Window = Library:MakeWindow({
    Title = "Lynix Hub üè° | Brookhaven RP",
    SubTitle = "by: Shadow, Void777, God777",
    LoadText = "Carregando Lynix Hub",
    Flags = "LynixHub_Brookhaven"
})

Window:AddMinimizeButton({
    Button = { Image = "rbxassetid://92938877761950", BackgroundTransparency = 1 },
    Corner = { CornerRadius = UDim.new(35, 1) },
})

-- Tabs
local InfoTab = Window:MakeTab({ Title = "Info", Icon = "rbxassetid://15309138473" })
local ServerTab = Window:MakeTab({ Title = "Server", Icon = "home" })
local FunTab = Window:MakeTab({ Title = "Fun", Icon = "fun" })
local HouseTab = Window:MakeTab({ Title = "House", Icon = "Home" })
local CarTab = Window:MakeTab({ Title = "Car", Icon = "Car" })
local RGBTab = Window:MakeTab({ Title = "RGB", Icon = "brush" })
local TrollTab = Window:MakeTab({ Title = "Troll", Icon = "skull" })
local TeleportTab = Window:MakeTab({ Title = "Teleporte", Icon = "Star" })
local FETab = Window:MakeTab({ Title = "FE", Icon = "Hammer" })
local ProtectionTab = Window:MakeTab({ Title = "Protection", Icon = "rbxassetid://11322093465" })

-- Fun√ß√£o para exibir notifica√ß√£o
local function ShowNotification(title, text, icon)
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = title,
            Text = text,
            Icon = icon or "",
            Duration = 5
        })
    end)
end

-- Fun√ß√£o para obter thumbnail do jogador
local function GetPlayerThumbnail(userId)
    local thumbType = Enum.ThumbnailType.HeadShot
    local thumbSize = Enum.ThumbnailSize.Size100x100
    local success, result = pcall(function()
        return Players:GetUserThumbnailAsync(userId, thumbType, thumbSize)
    end)
    return success and result or ""
end

-- Fun√ß√£o para encontrar jogador por nome parcial
local function FindPlayerByPartialName(partial)
    partial = partial:lower()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Name:lower():sub(1, #partial) == partial then
            return player
        end
    end
    return nil
end

-- === Info Tab ===
InfoTab:AddSection({ "Informa√ß√µes do Script" })
InfoTab:AddParagraph({ "Owner / Developer:", "Shadow, Void777, God777" })
InfoTab:AddParagraph({ "Colabora√ß√µes:", "Shadow" })
InfoTab:AddParagraph({ "Voc√™ est√° usando:", "Lynix Brookhaven v4.0" })
InfoTab:AddParagraph({ "Executor:", detectExecutor() })

InfoTab:AddSection({ "Rejoin" })
InfoTab:AddButton({
    Name = "Rejoin",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
    end
})

-- === Server Tab ===
ServerTab:AddSection({ "Servidor do Hub" })
ServerTab:AddDiscordInvite({
    Name = "Lynix | Studios",
    Description = "Junte-se ao nosso servidor Discord!",
    Logo = "rbxassetid://92938877761950",
    Invite = "https://discord.gg/4PTFxyc5"
})

ServerTab:AddButton({
    Name = "Copiar @ do TikTok",
    Callback = function()
        setclipboard("@MrsVoid777")
        setclipboard("https://www.tiktok.com/@Void777?_t=ZM-8wFjhRHkmOd&_r=1")
        ShowNotification("Copiado!", "@MrsVoid777 e link do TikTok copiados!", nil)
    end
})

-- === Fun Tab ===
FunTab:AddSection({ "Player Character" })

-- Headsit
local selectedPlayerName = nil
local headsitActive = false

local function HeadsitOnPlayer(targetPlayer)
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local localRoot = character:FindFirstChild("HumanoidRootPart")
    if not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("Head") or not localRoot then
        ShowNotification("Erro", "Jogador alvo ou seu personagem n√£o encontrado!", nil)
        return false
    end
    local targetHead = targetPlayer.Character.Head
    localRoot.CFrame = targetHead.CFrame * CFrame.new(0, 2.2, 0)
    for _, v in pairs(localRoot:GetChildren()) do
        if v:IsA("WeldConstraint") then v:Destroy() end
    end
    local weld = Instance.new("WeldConstraint")
    weld.Part0 = localRoot
    weld.Part1 = targetHead
    weld.Parent = localRoot
    humanoid.Sit = true
    ShowNotification("Headsit", "Ativado em " .. targetPlayer.Name, GetPlayerThumbnail(targetPlayer.UserId))
    return true
end

local function RemoveHeadsit()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local localRoot = character:FindFirstChild("HumanoidRootPart")
    if localRoot then
        for _, v in pairs(localRoot:GetChildren()) do
            if v:IsA("WeldConstraint") then v:Destroy() end
        end
    end
    if humanoid then humanoid.Sit = false end
    ShowNotification("Headsit", "Desativado!", nil)
end

FunTab:AddTextBox({
    Name = "Nome do Jogador",
    Description = "Digite parte do nome",
    PlaceholderText = "ex: lo ‚Üí Void777",
    Callback = function(Value)
        local foundPlayer = FindPlayerByPartialName(Value)
        if foundPlayer then
            selectedPlayerName = foundPlayer.Name
            ShowNotification("Jogador Selecionado", foundPlayer.Name .. " foi selecionado!", GetPlayerThumbnail(foundPlayer.UserId))
        else
            ShowNotification("Erro", "Nenhum jogador encontrado com esse nome.", nil)
        end
    end
})

FunTab:AddButton({
    Name = "Headsit",
    Callback = function()
        if not selectedPlayerName then
            ShowNotification("Erro", "Selecione um jogador primeiro!", nil)
            return
        end
        if not headsitActive then
            local target = Players:FindFirstChild(selectedPlayerName)
            if target and HeadsitOnPlayer(target) then
                headsitActive = true
            end
        else
            RemoveHeadsit()
            headsitActive = false
        end
    end
})

-- Sliders para Speed, JumpPower e Gravity
FunTab:AddSlider({
    Name = "Speed Player",
    Increase = 1,
    MinValue = 16,
    MaxValue = 888,
    Default = 16,
    Callback = function(Value)
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then humanoid.WalkSpeed = Value end
    end
})

FunTab:AddSlider({
    Name = "JumpPower",
    Increase = 1,
    MinValue = 50,
    MaxValue = 500,
    Default = 50,
    Callback = function(Value)
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then humanoid.JumpPower = Value end
    end
})

FunTab:AddSlider({
    Name = "Gravity",
    Increase = 1,
    MinValue = 0,
    MaxValue = 10000,
    Default = 196.2,
    Callback = function(Value)
        Workspace.Gravity = Value
    end
})

-- Infinite Jump
local InfiniteJumpEnabled = false
game:GetService("UserInputService").JumpRequest:Connect(function()
    if InfiniteJumpEnabled then
        local character = LocalPlayer.Character
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

FunTab:AddToggle({
    Name = "Infinite Jump",
    Default = false,
    Callback = function(Value)
        InfiniteJumpEnabled = Value
    end
})

FunTab:AddButton({
    Name = "Reset Speed/Gravity/JumpPower",
    Callback = function()
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 16
            humanoid.JumpPower = 50
        end
        Workspace.Gravity = 196.2
        InfiniteJumpEnabled = false
        ShowNotification("Reset", "Valores de Speed, Gravity e JumpPower resetados!", nil)
    end
})

-- Ultimate Noclip
local UltimateNoclip = {
    Enabled = false,
    Connections = {},
    SoccerBalls = {}
}

local function ManagePlayerCollisions(character)
    if not character then return end
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not UltimateNoclip.Enabled
            part.Anchored = false
        end
    end
end

local function VoidProtection(rootPart)
    if rootPart.Position.Y < -500 then
        local safeCFrame = CFrame.new(0, 100, 0)
        local rayParams = RaycastParams.new()
        rayParams.FilterDescendantsInstances = {LocalPlayer.Character}
        local result = Workspace:Raycast(rootPart.Position, Vector3.new(0, 500, 0), rayParams)
        rootPart.CFrame = result and CFrame.new(result.Position + Vector3.new(0, 5, 0)) or safeCFrame
    end
end

local function ManageSoccerBalls()
    local soccerFolder = Workspace:FindFirstChild("Com", true) and Workspace.Com:FindFirstChild("001_SoccerBalls")
    if soccerFolder then
        for _, ball in ipairs(soccerFolder:GetChildren()) do
            if ball.Name:match("^Soccer") then
                pcall(function()
                    ball.CanCollide = not UltimateNoclip.Enabled
                    ball.Anchored = UltimateNoclip.Enabled
                end)
                UltimateNoclip.SoccerBalls[ball] = true
            end
        end
        if not UltimateNoclip.Connections.BallAdded then
            UltimateNoclip.Connections.BallAdded = soccerFolder.ChildAdded:Connect(function(ball)
                if ball.Name:match("^Soccer") then
                    task.wait(0.3)
                    pcall(function()
                        ball.CanCollide = not UltimateNoclip.Enabled
                        ball.Anchored = UltimateNoclip.Enabled
                    end)
                end
            end)
        end
    end
end

local function MainNoclipLoop()
    UltimateNoclip.Connections.Heartbeat = RunService.Heartbeat:Connect(function()
        local character = LocalPlayer.Character
        if character then
            ManagePlayerCollisions(character)
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if rootPart then VoidProtection(rootPart) end
        end
        if tick() % 2 < 0.1 then ManageSoccerBalls() end
    end)
end

FunTab:AddToggle({
    Name = "Ultimate Noclip",
    Description = "Noclip com controle de bolas integrado",
    Default = false,
    Callback = function(state)
        UltimateNoclip.Enabled = state
        if state then
            MainNoclipLoop()
            ManageSoccerBalls()
            UltimateNoclip.Connections.CharAdded = LocalPlayer.CharacterAdded:Connect(function()
                task.wait(0.5)
                ManagePlayerCollisions(LocalPlayer.Character)
            end)
        else
            for _, conn in pairs(UltimateNoclip.Connections) do
                conn:Disconnect()
            end
            if LocalPlayer.Character then
                ManagePlayerCollisions(LocalPlayer.Character)
            end
            for ball in pairs(UltimateNoclip.SoccerBalls) do
                if ball.Parent then
                    pcall(function()
                        ball.CanCollide = true
                        ball.Anchored = false
                    end)
                end
            end
            UltimateNoclip.Connections = {}
            UltimateNoclip.SoccerBalls = {}
        end
    end
})

-- Anti-Sit
local antiSitConnection = nil
FunTab:AddToggle({
    Name = "Anti-Sit",
    Description = "Impede o jogador de sentar",
    Default = false,
    Callback = function(state)
        if state then
            local function ApplyAntiSit(character)
                local humanoid = character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.Sit = false
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
                    if antiSitConnection then antiSitConnection:Disconnect() end
                    antiSitConnection = humanoid.Seated:Connect(function(isSeated)
                        if isSeated then
                            humanoid.Sit = false
                            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                        end
                    end)
                end
            end
            if LocalPlayer.Character then ApplyAntiSit(LocalPlayer.Character) end
            LocalPlayer.CharacterAdded:Connect(function(character)
                local humanoid = character:WaitForChild("Humanoid", 5)
                if humanoid then ApplyAntiSit(character) end
            end)
        else
            if antiSitConnection then
                antiSitConnection:Disconnect()
                antiSitConnection = nil
            end
            if LocalPlayer.Character then
                local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                if humanoid then humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true) end
            end
        end
    end
})

-- Fly GUI
FunTab:AddButton({
    Name = "Ativar Fly GUI",
    Description = "Carrega um GUI de fly universal",
    Callback = function()
        local success, _ = pcall(function()
            loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Fly-gui-v3-30439"))()
        end)
        ShowNotification(success and "Sucesso" or "Erro", success and "Fly GUI carregado!" or "Falha ao carregar o Fly GUI.", nil)
    end
})

-- ESP
local billboardGuis = {}
local connections = {}
local espEnabled = false
local selectedColor = "RGB"

FunTab:AddDropdown({
    Name = "Cor do ESP",
    Default = "RGB",
    Options = {"RGB", "Branco", "Preto", "Vermelho", "Verde", "Azul", "Amarelo", "Rosa", "Roxo"},
    Callback = function(value)
        selectedColor = value
    end
})

local function GetESPColor()
    if selectedColor == "RGB" then
        local h = (tick() % 5) / 5
        return Color3.fromHSV(h, 1, 1)
    end
    local colors = {
        Branco = Color3.fromRGB(255, 255, 255),
        Preto = Color3.fromRGB(0, 0, 0),
        Vermelho = Color3.fromRGB(255, 0, 0),
        Verde = Color3.fromRGB(0, 255, 0),
        Azul = Color3.fromRGB(0, 170, 255),
        Amarelo = Color3.fromRGB(255, 255, 0),
        Rosa = Color3.fromRGB(255, 105, 180),
        Roxo = Color3.fromRGB(128, 0, 128)
    }
    return colors[selectedColor] or Color3.new(1, 1, 1)
end

local function UpdateESP(player)
    if player == LocalPlayer or not espEnabled then return end
    local character = player.Character
    if character then
        local head = character:FindFirstChild("Head")
        if head then
            if billboardGuis[player] then billboardGuis[player]:Destroy() end
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "ESP_Billboard"
            billboard.Parent = head
            billboard.Adornee = head
            billboard.Size = UDim2.new(0, 200, 0, 50)
            billboard.StudsOffset = Vector3.new(0, 3, 0)
            billboard.AlwaysOnTop = true
            local textLabel = Instance.new("TextLabel")
            textLabel.Parent = billboard
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.TextStrokeTransparency = 0.5
            textLabel.Font = Enum.Font.SourceSansBold
            textLabel.TextSize = 14
            textLabel.Text = player.Name .. " | " .. player.AccountAge .. " dias"
            textLabel.TextColor3 = GetESPColor()
            billboardGuis[player] = billboard
        end
    end
end

local function RemoveESP(player)
    if billboardGuis[player] then
        billboardGuis[player]:Destroy()
        billboardGuis[player] = nil
    end
end

FunTab:AddToggle({
    Name = "ESP Ativado",
    Description = "Mostra nome e idade da conta dos jogadores",
    Default = false,
    Callback = function(value)
        espEnabled = value
        if espEnabled then
            for _, player in pairs(Players:GetPlayers()) do UpdateESP(player) end
            local updateConnection = RunService.Heartbeat:Connect(function()
                for _, player in pairs(Players:GetPlayers()) do
                    UpdateESP(player)
                    if selectedColor == "RGB" and billboardGuis[player] and billboardGuis[player]:FindFirstChild("TextLabel") then
                        billboardGuis[player].TextLabel.TextColor3 = GetESPColor()
                    end
                end
            end)
            table.insert(connections, updateConnection)
            local playerAdded = Players.PlayerAdded:Connect(function(player)
                UpdateESP(player)
                local charConn = player.CharacterAdded:Connect(function() UpdateESP(player) end)
                table.insert(connections, charConn)
            end)
            table.insert(connections, playerAdded)
            local playerRemoving = Players.PlayerRemoving:Connect(function(player) RemoveESP(player) end)
            table.insert(connections, playerRemoving)
        else
            for _, player in pairs(Players:GetPlayers()) do RemoveESP(player) end
            for _, conn in pairs(connections) do conn:Disconnect() end
            connections = {}
            billboardGuis = {}
        end
    end
})

-- === House Tab ===
HouseTab:AddSection({ "Fun√ß√µes da Casa" })

HouseTab:AddButton({
    Name = "Remover Ban de Todas as Casas",
    Description = "Remove bans de todas as casas",
    Callback = function()
        local successCount = 0
        local failCount = 0
        for i = 1, 37 do
            local bannedBlockName = "BannedBlock" .. i
            local bannedBlock = Workspace:FindFirstChild(bannedBlockName, true)
            if bannedBlock then
                local success, _ = pcall(function() bannedBlock:Destroy() end)
                if success then successCount = successCount + 1 else failCount = failCount + 1 end
            end
        end
        for _, house in pairs(Workspace:GetDescendants()) do
            if house.Name:match("BannedBlock") then
                local success, _ = pcall(function() house:Destroy() end)
                if success then successCount = successCount + 1 else failCount = failCount + 1 end
            end
        end
        if successCount > 0 then
            ShowNotification("Sucesso", "Bans removidos de " .. successCount .. " casas!", nil)
        end
        if failCount > 0 then
            ShowNotification("Aviso", "Falha ao remover bans de " .. failCount .. " casas.", nil)
        end
        if successCount == 0 and failCount == 0 then
            ShowNotification("Aviso", "Nenhum ban encontrado para remover.", nil)
        end
    end
})

-- === Car Tab ===
CarTab:AddSection({ "Fun√ß√µes de Carros" })

local TeleportCarro = {}
TeleportCarro.Players = Players
TeleportCarro.Workspace = Workspace
TeleportCarro.LocalPlayer = LocalPlayer
TeleportCarro.Camera = Camera

function TeleportCarro:MostrarNotificacao(mensagem)
    ShowNotification("Aviso", mensagem, nil)
end

function TeleportCarro:ToggleFallDamage(disable)
    if not self.LocalPlayer.Character or not self.LocalPlayer.Character:FindFirstChild("Humanoid") then return false end
    local humanoid = self.LocalPlayer.Character.Humanoid
    if disable then
        humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
        humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
        humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
        humanoid.PlatformStand = false
        return true
    else
        humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
        humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
        return false
    end
end

function TeleportCarro:TeleportToSeat(seat, car)
    if not self.LocalPlayer.Character or not self.LocalPlayer.Character:FindFirstChild("Humanoid") then
        self:MostrarNotificacao("Personagem n√£o encontrado!")
        return false
    end
    local humanoid = self.LocalPlayer.Character.Humanoid
    local rootPart = self.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not rootPart then
        self:MostrarNotificacao("Parte raiz do personagem n√£o encontrada!")
        return false
    end
    humanoid.Sit = false
    task.wait(0.1)
    rootPart.CFrame = seat.CFrame + Vector3.new(0, 5, 0)
    task.wait(0.1)
    seat:Sit(humanoid)
    task.wait(0.5)
    return humanoid.SeatPart == seat
end

function TeleportCarro:TeleportToVoid(car)
    if not car then
        self:MostrarNotificacao("Ve√≠culo inv√°lido!")
        return
    end
    if not car.PrimaryPart then
        local body = car:FindFirstChild("Body", true) or car:FindFirstChild("Chassis", true)
        if body and body:IsA("BasePart") then
            car.PrimaryPart = body
        else
            self:MostrarNotificacao("Parte principal do ve√≠culo n√£o encontrada!")
            return
        end
    end
    car:SetPrimaryPartCFrame(CFrame.new(Vector3.new(0, -1000, 0)))
    task.wait(0.5)
end

function TeleportCarro:TeleportToPlayer(car, playerPos)
    if not car then
        self:MostrarNotificacao("Ve√≠culo inv√°lido!")
        return
    end
    if not car.PrimaryPart then
        local body = car:FindFirstChild("Body", true) or car:FindFirstChild("Chassis", true)
        if body and body:IsA("BasePart") then
            car.PrimaryPart = body
        else
            self:MostrarNotificacao("Parte principal do ve√≠culo n√£o encontrada!")
            return
        end
    end
    local targetPos = playerPos + Vector3.new(5, 0, 5)
    car:SetPrimaryPartCFrame(CFrame.new(targetPos))
    task.wait(0.5)
end

function TeleportCarro:ExitCarAndReturn(originalPos)
    if not self.LocalPlayer.Character or not self.LocalPlayer.Character:FindFirstChild("Humanoid") then return end
    local humanoid = self.LocalPlayer.Character.Humanoid
    if humanoid.SeatPart then humanoid.Sit = false end
    task.wait(0.1)
    if originalPos then
        self.LocalPlayer.Character:PivotTo(CFrame.new(originalPos))
    end
end

function TeleportCarro:AtualizarListaCarros()
    local pastaVeiculos = self.Workspace:FindFirstChild("Vehicles")
    local listaCarros = {}
    if pastaVeiculos then
        for _, carro in ipairs(pastaVeiculos:GetChildren()) do
            if carro.Name:match("Car$") then
                table.insert(listaCarros, carro.Name)
            end
        end
    end
    return listaCarros
end

CarTab:AddParagraph({ Title = "Use o Void Protection", Content = "" })

CarTab:AddToggle({
    Name = "Matar todos os carros do servidor",
    Description = "Teleporta os carros para o void",
    Default = false,
    Callback = function(state)
        local originalPosition
        local teleportActive = state
        local fallDamageDisabled = false
        if state then
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                originalPosition = LocalPlayer.Character.HumanoidRootPart.Position
            else
                TeleportCarro:MostrarNotificacao("Personagem n√£o encontrado!")
                return
            end
            fallDamageDisabled = TeleportCarro:ToggleFallDamage(true)
            spawn(function()
                local vehiclesFolder = TeleportCarro.Workspace:FindFirstChild("Vehicles")
                if not vehiclesFolder then
                    TeleportCarro:MostrarNotificacao("Pasta de ve√≠culos n√£o encontrada!")
                    return
                end
                local cars = {}
                for _, car in ipairs(vehiclesFolder:GetChildren()) do
                    if car.Name:match("Car$") then table.insert(cars, car) end
                end
                for _, car in ipairs(cars) do
                    if not teleportActive then break end
                    local vehicleSeat = car:FindFirstChildWhichIsA("VehicleSeat", true)
                    if vehicleSeat and vehicleSeat.Occupant == nil then
                        local success = TeleportCarro:TeleportToSeat(vehicleSeat, car)
                        if success then
                            TeleportCarro:TeleportToVoid(car)
                            TeleportCarro:ExitCarAndReturn(originalPosition)
                            task.wait(1)
                        end
                    end
                end
                if teleportActive then
                    teleportActive = false
                    TeleportCarro:ToggleFallDamage(false)
                end
            end)
        else
            teleportActive = false
            TeleportCarro:ToggleFallDamage(false)
        end
    end
})

local DropdownCar = CarTab:AddDropdown({
    Name = "Selecionar Carro do Jogador",
    Description = "Selecione o carro de um jogador",
    Default = nil,
    Options = TeleportCarro:AtualizarListaCarros(),
    Callback = function(carroSelecionado)
        _G.SelectedVehicle = carroSelecionado
    end
})

CarTab:AddToggle({
    Name = "Ver C√¢mera do Carro Selecionado",
    Description = "Foca a c√¢mera no carro selecionado",
    Default = false,
    Callback = function(state)
        if state then
            if not _G.SelectedVehicle or _G.SelectedVehicle == "" then
                TeleportCarro:MostrarNotificacao("Nenhum carro selecionado!")
                return
            end
            local vehiclesFolder = TeleportCarro.Workspace:FindFirstChild("Vehicles")
            if not vehiclesFolder then
                TeleportCarro:MostrarNotificacao("Pasta de ve√≠culos n√£o encontrada!")
                return
            end
            local vehicle = vehiclesFolder:FindFirstChild(_G.SelectedVehicle)
            if not vehicle then
                TeleportCarro:MostrarNotificacao("Carro selecionado n√£o encontrado!")
                return
            end
            local vehicleSeat = vehicle:FindFirstChildWhichIsA("VehicleSeat", true)
            if not vehicleSeat then
                TeleportCarro:MostrarNotificacao("Assento do carro n√£o encontrado!")
                return
            end
            TeleportCarro.OriginalCameraSubject = TeleportCarro.Camera.CameraSubject
            TeleportCarro.OriginalCameraType = TeleportCarro.Camera.CameraType
            TeleportCarro.Camera.CameraSubject = vehicleSeat
            TeleportCarro.Camera.CameraType = Enum.CameraType.Follow
            TeleportCarro:MostrarNotificacao("C√¢mera ajustada para o carro " .. _G.SelectedVehicle .. "!")
        else
            if TeleportCarro.OriginalCameraSubject then
                TeleportCarro.Camera.CameraSubject = TeleportCarro.OriginalCameraSubject
                TeleportCarro.Camera.CameraType = TeleportCarro.OriginalCameraType or Enum.CameraType.Custom
                TeleportCarro:MostrarNotificacao("C√¢mera restaurada ao normal!")
                TeleportCarro.OriginalCameraSubject = nil
                TeleportCarro.OriginalCameraType = nil
            end
        end
    end
})

Workspace:WaitForChild("Vehicles").ChildAdded:Connect(function()
    DropdownCar:Set(TeleportCarro:AtualizarListaCarros())
end)
Workspace:WaitForChild("Vehicles").ChildRemoved:Connect(function()
    DropdownCar:Set(TeleportCarro:AtualizarListaCarros())
end)

CarTab:AddButton({
    Name = "Destruir Carro Selecionado",
    Description = "Teleporta o carro selecionado para o void",
    Callback = function()
        if not _G.SelectedVehicle or _G.SelectedVehicle == "" then
            TeleportCarro:MostrarNotificacao("Nenhum carro selecionado!")
            return
        end
        local vehiclesFolder = TeleportCarro.Workspace:FindFirstChild("Vehicles")
        if not vehiclesFolder then
            TeleportCarro:MostrarNotificacao("Pasta de ve√≠culos n√£o encontrada!")
            return
        end
        local vehicle = vehiclesFolder:FindFirstChild(_G.SelectedVehicle)
        if not vehicle then
            TeleportCarro:MostrarNotificacao("Carro selecionado n√£o encontrado!")
            return
        end
        local vehicleSeat = vehicle:FindFirstChildWhichIsA("VehicleSeat", true)
        if not vehicleSeat then
            TeleportCarro:MostrarNotificacao("Assento do carro n√£o encontrado!")
            return
        end
        if vehicleSeat.Occupant then
            TeleportCarro:MostrarNotificacao("O kill car n√£o foi poss√≠vel, h√° algu√©m sentado no assento do motorista!")
            return
        end
        local originalPos = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Position
        if not originalPos then
            TeleportCarro:MostrarNotificacao("Personagem do jogador n√£o encontrado!")
            return
        end
        local isFallDamageOff = TeleportCarro:ToggleFallDamage(true)
        local success = TeleportCarro:TeleportToSeat(vehicleSeat, vehicle)
        if success then
            TeleportCarro:TeleportToVoid(vehicle)
            TeleportCarro:MostrarNotificacao("Carro " .. _G.SelectedVehicle .. " foi teleportado para o void!")
            TeleportCarro:ExitCarAndReturn(originalPos)
        else
            TeleportCarro:MostrarNotificacao("Falha ao sentar no carro!")
        end
        TeleportCarro:ToggleFallDamage(false)
    end
})

CarTab:AddButton({
    Name = "Trazer Carro Selecionado",
    Description = "Teleporta o carro selecionado para sua posi√ß√£o",
    Callback = function()
        if not _G.SelectedVehicle or _G.SelectedVehicle == "" then
            TeleportCarro:MostrarNotificacao("Nenhum carro selecionado!")
            return
        end
        local vehiclesFolder = TeleportCarro.Workspace:FindFirstChild("Vehicles")
        if not vehiclesFolder then
            TeleportCarro:MostrarNotificacao("Pasta de ve√≠culos n√£o encontrada!")
            return
        end
        local vehicle = vehiclesFolder:FindFirstChild(_G.SelectedVehicle)
        if not vehicle then
            TeleportCarro:MostrarNotificacao("Carro selecionado n√£o encontrado!")
            return
        end
        local vehicleSeat = vehicle:FindFirstChildWhichIsA("VehicleSeat", true)
        if not vehicleSeat then
            TeleportCarro:MostrarNotificacao("Assento do carro n√£o encontrado!")
            return
        end
        if vehicleSeat.Occupant then
            TeleportCarro:MostrarNotificacao("O teleporte do carro n√£o foi poss√≠vel, h√° algu√©m sentado no assento do motorista!")
            return
        end
        local originalPos = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Position
        if not originalPos then
            TeleportCarro:MostrarNotificacao("Personagem do jogador n√£o encontrado!")
            return
        end
        local isFallDamageOff = TeleportCarro:ToggleFallDamage(true)
        local success = TeleportCarro:TeleportToSeat(vehicleSeat, vehicle)
        if success then
            TeleportCarro:TeleportToPlayer(vehicle, originalPos)
            TeleportCarro:MostrarNotificacao("Carro " .. _G.SelectedVehicle .. " foi teleportado para voc√™!")
            TeleportCarro:ExitCarAndReturn(originalPos)
        else
            TeleportCarro:MostrarNotificacao("Falha ao sentar no carro!")
        end
        TeleportCarro:ToggleFallDamage(false)
    end
})

CarTab:AddButton({
    Name = "Trazer Todos os Carros",
    Description = "Teleporta todos os carros do servidor para sua posi√ß√£o",
    Callback = function()
        local originalPos = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Position
        if not originalPos then
            TeleportCarro:MostrarNotificacao("Personagem do jogador n√£o encontrado!")
            return
        end
        local vehiclesFolder = TeleportCarro.Workspace:FindFirstChild("Vehicles")
        if not vehiclesFolder then
            TeleportCarro:MostrarNotificacao("Pasta de ve√≠culos n√£o encontrada!")
            return
        end
        local isFallDamageOff = TeleportCarro:ToggleFallDamage(true)
        local cars = {}
        for _, car in ipairs(vehiclesFolder:GetChildren()) do
            if car.Name:match("Car$") then table.insert(cars, car) end
        end
        for _, car in ipairs(cars) do
            local vehicleSeat = car:FindFirstChildWhichIsA("VehicleSeat", true)
            if vehicleSeat and vehicleSeat.Occupant == nil then
                local success = TeleportCarro:TeleportToSeat(vehicleSeat, car)
                if success then
                    TeleportCarro:TeleportToPlayer(car, originalPos)
                    TeleportCarro:MostrarNotificacao("Carro " .. car.Name .. " foi teleportado para voc√™!")
                    TeleportCarro:ExitCarAndReturn(originalPos)
                    task.wait(1)
                else
                    TeleportCarro:MostrarNotificacao("Falha ao sentar no carro " .. car.Name .. "!")
                end
            else
                if vehicleSeat then
                    TeleportCarro:MostrarNotificacao("Carro " .. car.Name .. " ignorado: algu√©m est√° no assento do motorista!")
                else
                    TeleportCarro:MostrarNotificacao("Carro " .. car.Name .. " ignorado: assento n√£o encontrado!")
                end
            end
        end
        TeleportCarro:ToggleFallDamage(false)
        if #cars == 0 then
            TeleportCarro:MostrarNotificacao("Nenhum carro dispon√≠vel para teleportar!")
        end
    end
})

-- === RGB Tab ===
RGBTab:AddSection({ "Efeitos RGB" })

local rgbSpeed = 3
RGBTab:AddSlider({
    Name = "Velocidade RGB",
    Description = "Aumenta a velocidade do efeito RGB",
    Min = 1,
    Max = 5,
    Increase = 1,
    Default = 3,
    Callback = function(Value)
        rgbSpeed = Value
    end
})

local function GetRainbowColor(speedMultiplier)
    local h = (tick() * speedMultiplier % 5) / 5
    return Color3.fromHSV(h, 1, 1)
end

local function FireServer(eventName, args)
    local event = ReplicatedStorage:FindFirstChild("RE")
    if event and event:FindFirstChild(eventName) then
        pcall(function()
            event[eventName]:FireServer(unpack(args))
        end)
    end
end

local nameBioRGBActive = false
RGBTab:AddToggle({
    Name = "Nome + Bio RGB",
    Default = false,
    Callback = function(state)
        nameBioRGBActive = state
        if state then
            task.spawn(function()
                while nameBioRGBActive and LocalPlayer.Character do
                    local color = GetRainbowColor(rgbSpeed)
                    FireServer("1RPNam1eColo1r", { "PickingRPNameColor", color })
                    FireServer("1RPNam1eColo1r", { "PickingRPBioColor", color })
                    task.wait(0.03)
                end
            end)
        end
    end
})

RGBTab:AddToggle({
    Name = "RGB Corpo",
    Description = "RGB no corpo",
    Default = false,
    Callback = function(Value)
        getgenv().rgbCorpo = Value
        task.spawn(function()
            while getgenv().rgbCorpo do
                local remote = ReplicatedStorage:FindFirstChild("Remotes")
                if remote and remote:FindFirstChild("ChangeBodyColor") then
                    pcall(function()
                        remote.ChangeBodyColor:FireServer({ BrickColor.new(GetRainbowColor(rgbSpeed)) })
                    end)
                end
                task.wait(0.1)
            end
        end)
    end
})

RGBTab:AddToggle({
    Name = "RGB Cabelo",
    Description = "RGB no cabelo",
    Default = false,
    Callback = function(Value)
        getgenv().rgbCabelo = Value
        task.spawn(function()
            while getgenv().rgbCabelo do
                FireServer("1Max1y", { "ChangeHairColor2", GetRainbowColor(rgbSpeed) })
                task.wait(0.5)
            end
        end)
    end
})

RGBTab:AddToggle({
    Name = "RGB Casa",
    Description = "RGB na casa",
    Default = false,
    Callback = function(Value)
        getgenv().rgbCasa = Value
        task.spawn(function()
            while getgenv().rgbCasa do
                FireServer("1Player1sHous1e", { "ColorPickHouse", GetRainbowColor(rgbSpeed) })
                task.wait(0.1)
            end
        end)
    end
})

RGBTab:AddToggle({
    Name = "Carro RGB (Premium)",
    Description = "Altera a cor do carro com RGB cont√≠nuo. Pode causar kick se n√£o for premium!",
    Default = false,
    Callback = function(state)
        local carRGBActive = state
        if state then
            task.spawn(function()
                while carRGBActive and LocalPlayer.Character do
                    local color = GetRainbowColor(rgbSpeed)
                    FireServer("1Player1sCa1r", { "PickingCarColor", color })
                    task.wait(0.03)
                end
            end)
        end
    end
})

RGBTab:AddToggle({
    Name = "RGB Bicicleta",
    Description = "RGB na bicicleta",
    Default = false,
    Callback = function(Value)
        getgenv().rgbBicicleta = Value
        task.spawn(function()
            while getgenv().rgbBicicleta do
                FireServer("1Player1sCa1r", { "NoMotorColor", GetRainbowColor(rgbSpeed) })
                task.wait(0.1)
            end
        end)
    end
})

RGBTab:AddToggle({
    Name = "RGB R√°dio",
    Description = "Altera a cor do r√°dio com RGB cont√≠nuo",
    Default = false,
    Callback = function(state)
        local radioRGBActive = state
        if state then
            task.spawn(function()
                while radioRGBActive and LocalPlayer.Character do
                    local color = GetRainbowColor(rgbSpeed)
                    local success, remote = pcall(function()
                        return LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("ToolGui"):WaitForChild("ToolSettings"):WaitForChild("Settings"):WaitForChild("PropsColor"):WaitForChild("SetColor")
                    end)
                    if success and remote then
                        pcall(function() remote:FireServer(color) end)
                    end
                    task.wait(0.03)
                end
            end)
        end
    end
})

RGBTab:AddToggle({
    Name = "RGB Megafone",
    Description = "RGB no megafone",
    Default = false,
    Callback = function(Value)
        getgenv().rgbMegafone = Value
        task.spawn(function()
            while getgenv().rgbMegafone do
                local color = GetRainbowColor(rgbSpeed)
                local gui = LocalPlayer:FindFirstChild("PlayerGui")
                if gui then
                    local btn = gui:FindFirstChild("ToolGui")
                    if btn then
                        local settings = btn:FindFirstChild("ToolSettings")
                        if settings then
                            local props = settings:FindFirstChild("Settings"):FindFirstChild("PropsColor")
                            if props and props:FindFirstChild("SetColor") then
                                pcall(function() props.SetColor:FireServer(color) end)
                            end
                        end
                    end
                end
                task.wait(0.1)
            end
        end)
    end
})

RGBTab:AddToggle({
    Name = "RGB Rosquinha",
    Description = "RGB na rosquinha",
    Default = false,
    Callback = function(Value)
        getgenv().rgbRosquinha = Value
        task.spawn(function()
            while getgenv().rgbRosquinha do
                local color = GetRainbowColor(rgbSpeed)
                local gui = LocalPlayer:FindFirstChild("PlayerGui")
                if gui then
                    local btn = gui:FindFirstChild("ToolGui")
                    if btn then
                        local settings = btn:FindFirstChild("ToolSettings")
                        if settings then
                            local props = settings:FindFirstChild("Settings"):FindFirstChild("PropsColor")
                            if props and props:FindFirstChild("SetColor") then
                                pcall(function() props.SetColor:FireServer(color) end)
                            end
                        end
                    end
                end
                task.wait(0.1)
            end
        end)
    end
})

-- === Troll Tab ===
TrollTab:AddSection({ "Sele√ß√£o de Jogador" })

local selectedPlayer = nil
local isFollowingKill = false
local isFollowingPull = false
local running = false
local connection = nil
local flingConnection = nil
local originalPosition = nil
local savedPosition = nil
local originalProperties = {}
local selectedKillPullMethod = nil
local selectedFlingMethod = nil
local soccerBall = nil
local couch = nil
local isSpectating = false
local spectatedPlayer = nil
local characterConnection = nil
local flingToggle = nil
local excludedPlayers = {}

local SetNetworkOwnerEvent = Instance.new("RemoteEvent")
SetNetworkOwnerEvent.Name = "SetNetworkOwnerEvent_" .. tostring(math.random(1000, 9999))
SetNetworkOwnerEvent.Parent = ReplicatedStorage

local serverScriptCode = [[
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local event = ReplicatedStorage:WaitForChild("]] .. SetNetworkOwnerEvent.Name .. [[")
    event.OnServerEvent:Connect(function(player, part, networkOwner)
        if part and part:IsA("BasePart") then
            pcall(function()
                part:SetNetworkOwner(networkOwner)
                part.Anchored = false
                part.CanCollide = true
                part.CanTouch = true
            end)
        end
    end)
]]

pcall(function() loadstring(serverScriptCode)() end)

local function DisableCarClient()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local carClient = backpack:FindFirstChild("CarClient")
    if carClient and carClient:IsA("LocalScript") then carClient.Disabled = true end
end

local function EnableCarClient()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local carClient = backpack:FindFirstChild("CarClient")
    if carClient and carClient:IsA("LocalScript") then carClient.Disabled = false end
end

local function GetPlayerNames()
    local playerNames = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then table.insert(playerNames, player.Name) end
    end
    return playerNames
end

local function UpdateDropdown(dropdown, spectateToggle)
    pcall(function()
        local currentValue = dropdown:Get()
        local playerNames = GetPlayerNames()
        dropdown:Set(playerNames)
        if currentValue and not table.find(playerNames, currentValue) then
            dropdown:Set("")
            selectedPlayer = nil
            if isSpectating then
                StopSpectating()
                if spectateToggle then pcall(function() spectateToggle:Set(false) end) end
            end
            if running or isFollowingKill or isFollowingPull then
                running = false
                isFollowingKill = false
                isFollowingPull = false
                if connection then connection:Disconnect() connection = nil end
                if flingConnection then flingConnection:Disconnect() flingConnection = nil end
                if flingToggle then pcall(function() flingToggle:Set(false) end) end
            end
        elseif currentValue and table.find(playerNames, currentValue) then
            dropdown:Set(currentValue)
        end
    end)
end

local function SpectatePlayer(playerName)
    if characterConnection then characterConnection:Disconnect() characterConnection = nil end
    local targetPlayer = Players:FindFirstChild(playerName)
    if targetPlayer and targetPlayer ~= LocalPlayer then
        spectatedPlayer = targetPlayer
        isSpectating = true
        local function UpdateCamera()
            if not isSpectating or not spectatedPlayer then return end
            if spectatedPlayer.Character and spectatedPlayer.Character:FindFirstChild("Humanoid") then
                Workspace.CurrentCamera.CameraSubject = spectatedPlayer.Character.Humanoid
            else
                Workspace.CurrentCamera.CameraSubject = nil
            end
        end
        UpdateCamera()
        characterConnection = RunService.Heartbeat:Connect(function()
            if not isSpectating then characterConnection:Disconnect() characterConnection = nil return end
            pcall(UpdateCamera)
        end)
        spectatedPlayer.CharacterAdded:Connect(function()
            if isSpectating then UpdateCamera() end
        end)
    else
        isSpectating = false
        spectatedPlayer = nil
    end
end

local function StopSpectating()
    if characterConnection then characterConnection:Disconnect() characterConnection = nil end
    isSpectating = false
    spectatedPlayer = nil
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character.Humanoid
        Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
    else
        Workspace.CurrentCamera.CameraSubject = nil
        Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
    end
end

local function TeleportToPlayer(playerName)
    local targetPlayer = Players:FindFirstChild(playerName)
    if targetPlayer and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local myHRP = LocalPlayer.Character.HumanoidRootPart
        local myHumanoid = LocalPlayer.Character.Humanoid
        for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Velocity = Vector3.zero
                part.RotVelocity = Vector3.zero
                part.Anchored = true
            end
        end
        local success, errorMessage = pcall(function()
            myHRP.CFrame = CFrame.new(targetPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, 2, 0))
        end)
        if not success then
            warn("Erro ao teletransportar: " .. tostring(errorMessage))
            return
        end
        myHumanoid.Sit = false
        myHumanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        task.wait(0.5)
        for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Anchored = false
                part.Velocity = Vector3.zero
                part.RotVelocity = Vector3.zero
            end
        end
        ShowNotification("Teleportado", "Teleportado para " .. playerName, nil)
    else
        ShowNotification("Erro", "Jogador ou personagem n√£o encontrado!", nil)
    end
end

LocalPlayer.CharacterAdded:Connect(function(character)
    if isSpectating then
        StopSpectating()
        pcall(function() SpectateToggleTab9:Set(false) end)
    end
end)

local DropdownPlayerTab9 = TrollTab:AddDropdown({
    Name = "Selecionar Jogador",
    Description = "Escolha um jogador para matar, puxar, visualizar ou aplicar fling",
    Default = "",
    Multi = false,
    Options = GetPlayerNames(),
    Callback = function(selectedPlayerName)
        if selectedPlayerName == "" or selectedPlayerName == nil then
            selectedPlayer = nil
            if running or isFollowingKill or isFollowingPull then
                running = false
                isFollowingKill = false
                isFollowingPull = false
                if connection then connection:Disconnect() end
                if flingConnection then flingConnection:Disconnect() end
                if flingToggle then pcall(function() flingToggle:Set(false) end) end
            end
            if isSpectating then StopSpectating() end
        else
            selectedPlayer = Players:FindFirstChild(selectedPlayerName)
            if isSpectating then
                StopSpectating()
                SpectatePlayer(selectedPlayerName)
            end
        end
    end
})

TrollTab:AddButton({
    Name = "Atualizar Lista",
    Callback = function()
        UpdateDropdown(DropdownPlayerTab9, SpectateToggleTab9)
    end
})

Players.PlayerAdded:Connect(function() task.wait(1) UpdateDropdown(DropdownPlayerTab9, SpectateToggleTab9) end)
Players.PlayerRemoving:Connect(function(player)
    UpdateDropdown(DropdownPlayerTab9, SpectateToggleTab9)
    if selectedPlayer == player then
        selectedPlayer = nil
        if isSpectating then StopSpectating() end
        if running then
            running = false
            if connection then connection:Disconnect() connection = nil end
            if flingConnection then flingConnection:Disconnect() flingConnection = nil end
            if flingToggle then flingToggle:Set(false) end
        end
        SpectateToggleTab9:Set(false)
        DropdownPlayerTab9:Set("")
    end
end)

TrollTab:AddButton({
    Name = "Teleportar para Jogador",
    Description = "Teleporta para o jogador selecionado",
    Callback = function()
        local selectedPlayerName = DropdownPlayerTab9:Get()
        if selectedPlayerName and selectedPlayerName ~= "" then
            local success, errorMessage = pcall(TeleportToPlayer, selectedPlayerName)
            if not success then
                ShowNotification("Erro", "Erro ao teletransportar: " .. tostring(errorMessage), nil)
            end
        else
            ShowNotification("Erro", "Selecione um jogador primeiro!", nil)
        end
    end
})

local SpectateToggleTab9 = TrollTab:AddToggle({
    Name = "Visualizar Jogador",
    Description = "Ativa/desativa a visualiza√ß√£o do jogador selecionado",
    Default = false,
    Callback = function(state)
        if state then
            if selectedPlayer then
                pcall(SpectatePlayer, selectedPlayer.Name)
            else
                SpectateToggleTab9:Set(false)
                ShowNotification("Erro", "Selecione um jogador primeiro!", nil)
            end
        else
            pcall(StopSpectating)
        end
    end
})

TrollTab:AddSection({ "Kill e Puxar" })

local DropdownKillPullMethod = TrollTab:AddDropdown({
    Name = "Selecionar M√©todo (Matar/Puxar)",
    Description = "Escolha o m√©todo para matar ou puxar",
    Options = {"Sof√°", "√înibus"},
    Callback = function(value)
        selectedKillPullMethod = value
    end
})

local function EquipSofa()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local sofa = backpack:FindFirstChild("Couch") or LocalPlayer.Character:FindFirstChild("Couch")
    if not sofa then
        local args = { [1] = "PickingTools", [2] = "Couch" }
        local success = pcall(function()
            ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Too1l"):InvokeServer(unpack(args))
        end)
        if not success then return false end
        repeat
            sofa = backpack:FindFirstChild("Couch")
            task.wait()
        until sofa or task.wait(5)
        if not sofa then return false end
    end
    if sofa.Parent ~= LocalPlayer.Character then
        sofa.Parent = LocalPlayer.Character
    end
    return true
end

local function KillWithSofa(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then
        ShowNotification("Erro", "Jogador ou personagem n√£o encontrado!", nil)
        return
    end
    if not EquipSofa() then
        ShowNotification("Erro", "Falha ao equipar o sof√°!", nil)
        return
    end
    isFollowingKill = true
    originalPosition = LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position
    ShowNotification("Kill Sof√°", "Iniciando kill com sof√° em " .. targetPlayer.Name, GetPlayerThumbnail(targetPlayer.UserId))
end

local function PullWithSofa(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then
        ShowNotification("Erro", "Jogador ou personagem n√£o encontrado!", nil)
        return
    end
    if not EquipSofa() then
        ShowNotification("Erro", "Falha ao equipar o sof√°!", nil)
        return
    end
    isFollowingPull = true
    originalPosition = LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position
    ShowNotification("Puxar Sof√°", "Iniciando puxar com sof√° em " .. targetPlayer.Name, GetPlayerThumbnail(targetPlayer.UserId))
end

local function KillWithBus(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then
        ShowNotification("Erro", "Jogador ou personagem n√£o encontrado!", nil)
        return
    end
    local character = LocalPlayer.Character
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then return end
    savedPosition = myHRP.Position
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1181.83, 76.08, -1158.83))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end)
    task.wait(0.5)
    DisableCarClient()
    local args = { [1] = "DeleteAllVehicles" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    args = { [1] = "PickingCar", [2] = "SchoolBus" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    task.wait(1)
    local vehiclesFolder = Workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then return end
    local busName = LocalPlayer.Name .. "Car"
    local bus = vehiclesFolder:FindFirstChild(busName)
    if not bus then return end
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1171.15, 79.45, -1166.2))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.Seated)
    end)
    local sitStart = tick()
    repeat
        task.wait()
        if tick() - sitStart > 10 then return end
    until humanoid.Sit
    for _, part in ipairs(bus:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
            pcall(function() part:SetNetworkOwner(nil) end)
        end
    end
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then part.CanCollide = false end
        end
    end)
    local lastUpdate = tick()
    local updateInterval = 0.05
    local startTime = tick()
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
        local newTargetHRP = targetCharacter:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetCharacter:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then return end
        if not myHRP or not humanoid then running = false return end
        if tick() - lastUpdate < updateInterval then return end
        lastUpdate = tick()
        local offset = Vector3.new(math.random(-10, 10), 0, math.random(-10, 10))
        pcall(function()
            local targetPosition = newTargetHRP.Position + offset
            bus:PivotTo(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 12000),
                    math.rad(Workspace.DistributedGameTime * 15000),
                    math.rad(Workspace.DistributedGameTime * 18000)
                )
            )
        end)
        local playerSeated = false
        for _, seat in ipairs(bus:GetDescendants()) do
            if (seat:IsA("Seat") or seat:IsA("VehicleSeat")) and seat.Name ~= "VehicleSeat" then
                if seat.Occupant == newTargetHumanoid then
                    playerSeated = true
                    break
                end
            end
        end
        if playerSeated or tick() - startTime > 10 then
            running = false
            if connection then connection:Disconnect() connection = nil end
            if flingConnection then flingConnection:Disconnect() flingConnection = nil end
            pcall(function()
                bus:PivotTo(CFrame.new(Vector3.new(-76.6, -401.97, -84.26)))
            end)
            task.wait(0.5)
            DisableCarClient()
            local args = { [1] = "DeleteAllVehicles" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
            end)
            if character then
                local myHRP = character:FindFirstChild("HumanoidRootPart")
                if myHRP and savedPosition then
                    pcall(function()
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                        task.wait(0.2)
                        myHRP.Velocity = Vector3.zero
                        myHRP.RotVelocity = Vector3.zero
                        myHRP.Anchored = false
                        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                    end)
                end
            end
            if character then
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                    end
                end
            end
            if humanoid then humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true) end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then seat.Disabled = false end
            end
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
            end)
        end
    end)
end

local followConnection
if followConnection then followConnection:Disconnect() end
followConnection = RunService.Heartbeat:Connect(function()
    if (isFollowingKill or isFollowingPull) and selectedPlayer and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
        pcall(function()
            local targetPosition = selectedPlayer.Character.HumanoidRootPart.Position
            LocalPlayer.Character:SetPrimaryPartCFrame(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 12000),
                    math.rad(Workspace.DistributedGameTime * 15000),
                    math.rad(Workspace.DistributedGameTime * 18000)
                )
            )
        end)
    end
end)

local sitCheckConnection
if sitCheckConnection then sitCheckConnection:Disconnect() end
sitCheckConnection = RunService.Heartbeat:Connect(function()
    if (isFollowingKill or isFollowingPull) and selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("Humanoid") then
        pcall(function()
            if selectedPlayer.Character.Humanoid.Sit then
                if isFollowingKill then
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(0, -500, 0))
                        task.wait(0.5)
                        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Too1l"):InvokeServer("PickingTools", "Couch")
                        task.wait(1)
                    end
                end
                isFollowingKill = false
                isFollowingPull = false
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and originalPosition then
                    local myHRP = LocalPlayer.Character.HumanoidRootPart
                    local myHumanoid = LocalPlayer.Character.Humanoid
                    pcall(function()
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(originalPosition + Vector3.new(0, 5, 0))
                        task.wait(0.2)
                        myHRP.Velocity = Vector3.zero
                        myHRP.RotVelocity = Vector3.zero
                        myHRP.Anchored = false
                        myHumanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                    end)
                    originalPosition = nil
                end
            end
        end)
    end
end)

TrollTab:AddButton({
    Name = "Matar",
    Description = "Inicia o matar com o m√©todo selecionado",
    Callback = function()
        if isFollowingKill or isFollowingPull or running then return end
        if not selectedPlayer or not selectedKillPullMethod then
            ShowNotification("Erro", "Selecione um jogador e m√©todo primeiro!", nil)
            return
        end
        if selectedKillPullMethod == "Sof√°" then
            KillWithSofa(selectedPlayer)
        elseif selectedKillPullMethod == "√înibus" then
            KillWithBus(selectedPlayer)
        end
    end
})

TrollTab:AddButton({
    Name = "Puxar",
    Description = "Inicia o puxar com o m√©todo selecionado",
    Callback = function()
        if isFollowingKill or isFollowingPull or running then return end
        if not selectedPlayer or not selectedKillPullMethod or selectedKillPullMethod ~= "Sof√°" then
            ShowNotification("Erro", "Selecione um jogador e o m√©todo 'Sof√°'!", nil)
            return
        end
        PullWithSofa(selectedPlayer)
    end
})

TrollTab:AddButton({
    Name = "Parar (Matar ou Puxar)",
    Description = "Para o movimento de matar ou puxar",
    Callback = function()
        isFollowingKill = false
        isFollowingPull = false
        for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
                part.Velocity = Vector3.zero
                part.RotVelocity = Vector3.zero
            end
        end
        local myHumanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
        if myHumanoid then myHumanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true) end
        for _, seat in ipairs(Workspace:GetDescendants()) do
            if seat:IsA("Seat") or seat:IsA("VehicleSeat") then seat.Disabled = false end
        end
        if originalPosition then
            local myHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if myHRP then
                pcall(function()
                    myHRP.Anchored = true
                    myHRP.CFrame = CFrame.new(originalPosition + Vector3.new(0, 5, 0))
                    task.wait(0.2)
                    myHRP.Velocity = Vector3.zero
                    myHRP.RotVelocity = Vector3.zero
                    myHRP.Anchored = false
                    myHumanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                end)
                originalPosition = nil
            end
        end
        DisableCarClient()
        local args = { [1] = "DeleteAllVehicles" }
        pcall(function()
            ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
        end)
        ShowNotification("Parado", "Matar/Puxar parado!", nil)
    end
})

TrollTab:AddSection({ "Flings" })

local DropdownFlingMethod = TrollTab:AddDropdown({
    Name = "Selecionar M√©todo de Fling",
    Description = "Escolha o m√©todo para aplicar fling",
    Options = {"Sof√°", "√înibus", "Bola", "Bola V2", "Barco", "Caminh√£o"},
    Callback = function(value)
        selectedFlingMethod = value
    end
})

local function EquipBola()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local bola = backpack:FindFirstChild("SoccerBall") or LocalPlayer.Character:FindFirstChild("SoccerBall")
    if not bola then
        local args = { [1] = "PickingTools", [2] = "SoccerBall" }
        local success = pcall(function()
            ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Too1l"):InvokeServer(unpack(args))
        end)
        if not success then
            ShowNotification("Erro", "Falha ao equipar a bola!", nil)
            return false
        end
        repeat
            bola = backpack:FindFirstChild("SoccerBall")
            task.wait()
        until bola or task.wait(5)
        if not bola then
            ShowNotification("Erro", "Bola n√£o encontrada ap√≥s tentativa!", nil)
            return false
        end
    end
    if bola.Parent ~= LocalPlayer.Character then
        bola.Parent = LocalPlayer.Character
    end
    return true
end

local function FlingWithSofa(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then
        ShowNotification("Erro", "Jogador ou personagem n√£o encontrado!", nil)
        return
    end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then return end
    if not EquipSofa() then
        ShowNotification("Erro", "Falha ao equipar o sof√°!", nil)
        return
    end
    task.wait(0.5)
    couch = character:FindFirstChild("Couch")
    if not couch then
        for _, obj in ipairs(Workspace:GetDescendants()) do
            if (obj.Name == "Couch" or obj.Name == "Couch" .. LocalPlayer.Name) and (obj:IsA("BasePart") or obj:IsA("Tool")) then
                couch = obj
                break
            end
        end
    end
    if not couch then
        ShowNotification("Erro", "Sof√° n√£o encontrado!", nil)
        return
    end
    if couch:IsA("BasePart") then
        originalProperties = {
            Anchored = couch.Anchored,
            CanCollide = couch.CanCollide,
            CanTouch = couch.CanTouch
        }
        couch.Anchored = false
        couch.CanCollide = true
        couch.CanTouch = true
        pcall(function() couch:SetNetworkOwner(nil) end)
    end
    savedPosition = myHRP.Position
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then part.CanCollide = false end
        end
    end)
    local startTime = tick()
    local walkFlingInstance = nil
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        if not targetPlayer or not targetPlayer.Character then running = false return end
        local newTargetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetPlayer.Character:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then running = false return end
        if not myHRP or not humanoid then running = false return end
        pcall(function()
            local targetPosition = newTargetHRP.Position
            character:SetPrimaryPartCFrame(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 15000),
                    math.rad(Workspace.DistributedGameTime * 18000),
                    math.rad(Workspace.DistributedGameTime * 21000)
                )
            )
        end)
        if newTargetHumanoid.Sit or tick() - startTime > 10 then
            running = false
            flingConnection:Disconnect()
            flingConnection = nil
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                    pcall(function() part:SetNetworkOwner(nil) end)
                end
            end
            walkFlingInstance = Instance.new("BodyVelocity")
            walkFlingInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            walkFlingInstance.Velocity = Vector3.new(math.random(-10, 10), 10, math.random(-10, 10)).Unit * 2000000 + Vector3.new(0, 2000000, 0)
            walkFlingInstance.Parent = myHRP
            pcall(function()
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(Vector3.new(-59599.73, 2040070.50, -293391.16))
                myHRP.Anchored = false
            end)
            local spinStart = tick()
            local spinConnection
            spinConnection = RunService.Heartbeat:Connect(function()
                if tick() - spinStart >= 0.5 then
                    spinConnection:Disconnect()
                    return
                end
                pcall(function()
                    character:SetPrimaryPartCFrame(
                        myHRP.CFrame * CFrame.Angles(
                            math.rad(Workspace.DistributedGameTime * 15000),
                            math.rad(Workspace.DistributedGameTime * 18000),
                            math.rad(Workspace.DistributedGameTime * 21000)
                        )
                    )
                end)
            end)
            task.wait(0.5)
            local args = { [1] = "PlayerWantsToDeleteTool", [2] = "Couch" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clea1rTool1s"):FireServer(unpack(args))
            end)
            pcall(function()
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                task.wait(0.2)
                myHRP.Velocity = Vector3.zero
                myHRP.RotVelocity = Vector3.zero
                myHRP.Anchored = false
                humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
            end)
            if walkFlingInstance then
                walkFlingInstance:Destroy()
                walkFlingInstance = nil
            end
            if couch and originalProperties then
                couch.Anchored = originalProperties.Anchored
                couch.CanCollide = originalProperties.CanCollide
                couch.CanTouch = originalProperties.CanTouch
                couch = nil
                originalProperties = {}
            end
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                    part.Velocity = Vector3.zero
                    part.RotVelocity = Vector3.zero
                end
            end
            if humanoid then
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
            end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
                    seat.Disabled = false
                end
            end
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
            end)
            if connection then
                connection:Disconnect()
                connection = nil
            end
            ShowNotification("Fling Sof√°", "Fling com sof√° conclu√≠do em " .. targetPlayer.Name, GetPlayerThumbnail(targetPlayer.UserId))
        end
    end)
end

local function FlingWithBall(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then
        ShowNotification("Erro", "Jogador ou personagem n√£o encontrado!", nil)
        return
    end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then
        ShowNotification("Erro", "Humanoid ou HumanoidRootPart n√£o encontrado!", nil)
        return
    end
    if not EquipBola() then
        ShowNotification("Erro", "Falha ao equipar a bola!", nil)
        return
    end
    task.wait(0.5)
    soccerBall = character:FindFirstChild("SoccerBall")
    if not soccerBall then
        for _, obj in ipairs(Workspace:GetDescendants()) do
            if (obj.Name == "SoccerBall" or obj.Name == "SoccerBall" .. LocalPlayer.Name) and (obj:IsA("BasePart") or obj:IsA("Tool")) then
                soccerBall = obj
                break
            end
        end
    end
    if not soccerBall then
        ShowNotification("Erro", "Bola n√£o encontrada!", nil)
        return
    end
    if soccerBall:IsA("BasePart") then
        originalProperties = {
            Anchored = soccerBall.Anchored,
            CanCollide = soccerBall.CanCollide,
            CanTouch = soccerBall.CanTouch
        }
        soccerBall.Anchored = false
        soccerBall.CanCollide = true
        soccerBall.CanTouch = true
        pcall(function() soccerBall:SetNetworkOwner(nil) end)
    end
    savedPosition = myHRP.Position
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then part.CanCollide = false end
        end
    end)
    local startTime = tick()
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        if not targetPlayer or not targetPlayer.Character then
            running = false
            return
        end
        local newTargetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetPlayer.Character:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then
            running = false
            return
        end
        if not myHRP or not humanoid then
            running = false
            return
        end
        pcall(function()
            local targetPosition = newTargetHRP.Position
            character:SetPrimaryPartCFrame(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 20000),
                    math.rad(Workspace.DistributedGameTime * 22000),
                    math.rad(Workspace.DistributedGameTime * 24000)
                )
            )
        end)
        if newTargetHumanoid.Sit or tick() - startTime > 8 then
            running = false
            flingConnection:Disconnect()
            flingConnection = nil
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                    pcall(function() part:SetNetworkOwner(nil) end)
                end
            end
            local walkFlingInstance = Instance.new("BodyVelocity")
            walkFlingInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            walkFlingInstance.Velocity = Vector3.new(math.random(-15, 15), 15, math.random(-15, 15)).Unit * 3000000 + Vector3.new(0, 2500000, 0)
            walkFlingInstance.Parent = myHRP
            pcall(function()
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(Vector3.new(-59599.73, 2040070.50, -293391.16))
                myHRP.Anchored = false
            end)
            local spinStart = tick()
            local spinConnection
            spinConnection = RunService.Heartbeat:Connect(function()
                if tick() - spinStart >= 0.5 then
                    spinConnection:Disconnect()
                    return
                end
                pcall(function()
                    character:SetPrimaryPartCFrame(
                        myHRP.CFrame * CFrame.Angles(
                            math.rad(Workspace.DistributedGameTime * 20000),
                            math.rad(Workspace.DistributedGameTime * 22000),
                            math.rad(Workspace.DistributedGameTime * 24000)
                        )
                    )
                end)
            end)
            task.wait(0.5)
            local args = { [1] = "PlayerWantsToDeleteTool", [2] = "SoccerBall" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clea1rTool1s"):FireServer(unpack(args))
            end)
            pcall(function()
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                task.wait(0.2)
                myHRP.Velocity = Vector3.zero
                myHRP.RotVelocity = Vector3.zero
                myHRP.Anchored = false
                humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
            end)
            if walkFlingInstance then
                walkFlingInstance:Destroy()
            end
            if soccerBall and originalProperties then
                soccerBall.Anchored = originalProperties.Anchored
                soccerBall.CanCollide = originalProperties.CanCollide
                soccerBall.CanTouch = originalProperties.CanTouch
                soccerBall = nil
                originalProperties = {}
            end
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                    part.Velocity = Vector3.zero
                    part.RotVelocity = Vector3.zero
                end
            end
            if humanoid then
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
            end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
                    seat.Disabled = false
                end
            end
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
            end)
            if connection then
                connection:Disconnect()
                connection = nil
            end
            ShowNotification("Fling Bola", "Fling com bola conclu√≠do em " .. targetPlayer.Name, GetPlayerThumbnail(targetPlayer.UserId))
        end
    end)
end

local function FlingWithBallV2(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then
        ShowNotification("Erro", "Jogador ou personagem n√£o encontrado!", nil)
        return
    end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then
        ShowNotification("Erro", "Humanoid ou HumanoidRootPart n√£o encontrado!", nil)
        return
    end
    if not EquipBola() then
        ShowNotification("Erro", "Falha ao equipar a bola!", nil)
        return
    end
    task.wait(0.5)
    soccerBall = character:FindFirstChild("SoccerBall")
    if not soccerBall then
        for _, obj in ipairs(Workspace:GetDescendants()) do
            if (obj.Name == "SoccerBall" or obj.Name == "SoccerBall" .. LocalPlayer.Name) and (obj:IsA("BasePart") or obj:IsA("Tool")) then
                soccerBall = obj
                break
            end
        end
    end
    if not soccerBall then
        ShowNotification("Erro", "Bola n√£o encontrada!", nil)
        return
    end
    if soccerBall:IsA("BasePart") then
        originalProperties = {
            Anchored = soccerBall.Anchored,
            CanCollide = soccerBall.CanCollide,
            CanTouch = soccerBall.CanTouch,
            Massless = soccerBall.Massless
        }
        soccerBall.Anchored = false
        soccerBall.CanCollide = true
        soccerBall.CanTouch = true
        soccerBall.Massless = false
        pcall(function() soccerBall:SetNetworkOwner(nil) end)
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        bodyVelocity.Velocity = Vector3.new(math.random(-20, 20), 20, math.random(-20, 20)).Unit * 4000000
        bodyVelocity.Parent = soccerBall
        task.spawn(function()
            task.wait(2)
            if bodyVelocity then bodyVelocity:Destroy() end
        end)
    end
    savedPosition = myHRP.Position
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then part.CanCollide = false end
        end
    end)
    local startTime = tick()
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        if not targetPlayer or not targetPlayer.Character then
            running = false
            return
        end
        local newTargetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetPlayer.Character:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then
            running = false
            return
        end
        if not myHRP or not humanoid then
            running = false
            return
        end
        pcall(function()
            local targetPosition = newTargetHRP.Position
            character:SetPrimaryPartCFrame(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 25000),
                    math.rad(Workspace.DistributedGameTime * 27000),
                    math.rad(Workspace.DistributedGameTime * 29000)
                )
            )
            if soccerBall:IsA("BasePart") then
                soccerBall.CFrame = CFrame.new(targetPosition + Vector3.new(0, 5, 0))
            end
        end)
        if newTargetHumanoid.Sit or tick() - startTime > 6 then
            running = false
            flingConnection:Disconnect()
            flingConnection = nil
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                    pcall(function() part:SetNetworkOwner(nil) end)
                end
            end
            local walkFlingInstance = Instance.new("BodyVelocity")
            walkFlingInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            walkFlingInstance.Velocity = Vector3.new(math.random(-20, 20), 20, math.random(-20, 20)).Unit * 3500000 + Vector3.new(0, 3000000, 0)
            walkFlingInstance.Parent = myHRP
            pcall(function()
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(Vector3.new(-59599.73, 2040070.50, -293391.16))
                myHRP.Anchored = false
            end)
            local spinStart = tick()
            local spinConnection
            spinConnection = RunService.Heartbeat:Connect(function()
                if tick() - spinStart >= 0.5 then
                    spinConnection:Disconnect()
                    return
                end
                pcall(function()
                    character:SetPrimaryPartCFrame(
                        myHRP.CFrame * CFrame.Angles(
                            math.rad(Workspace.DistributedGameTime * 25000),
                            math.rad(Workspace.DistributedGameTime * 27000),
                            math.rad(Workspace.DistributedGameTime * 29000)
                        )
                    )
                end)
            end)
            task.wait(0.5)
            local args = { [1] = "PlayerWantsToDeleteTool", [2] = "SoccerBall" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clea1rTool1s"):FireServer(unpack(args))
            end)
            pcall(function()
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                task.wait(0.2)
                myHRP.Velocity = Vector3.zero
                myHRP.RotVelocity = Vector3.zero
                myHRP.Anchored = false
                humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
            end)
            if walkFlingInstance then
                walkFlingInstance:Destroy()
            end
            if soccerBall and originalProperties then
                soccerBall.Anchored = originalProperties.Anchored
                soccerBall.CanCollide = originalProperties.CanCollide
                soccerBall.CanTouch = originalProperties.CanTouch
                soccerBall.Massless = originalProperties.Massless
                soccerBall = nil
                originalProperties = {}
            end
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                    part.Velocity = Vector3.zero
                    part.RotVelocity = Vector3.zero
                end
            end
            if humanoid then
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
            end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
                    seat.Disabled = false
                end
            end
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
            end)
            if connection then
                connection:Disconnect()
                connection = nil
            end
            ShowNotification("Fling Bola V2", "Fling com bola V2 conclu√≠do em " .. targetPlayer.Name, GetPlayerThumbnail(targetPlayer.UserId))
        end
    end)
end

local function FlingWithBoat(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then
        ShowNotification("Erro", "Jogador ou personagem n√£o encontrado!", nil)
        return
    end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then return end
    savedPosition = myHRP.Position
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1181.83, 76.08, -1158.83))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end)
    task.wait(0.5)
    DisableCarClient()
    local args = { [1] = "DeleteAllVehicles" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    args = { [1] = "PickingCar", [2] = "Boat" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    task.wait(1)
    local vehiclesFolder = Workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then return end
    local boatName = LocalPlayer.Name .. "Car"
    local boat = vehiclesFolder:FindFirstChild(boatName)
    if not boat then return end
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1171.15, 79.45, -1166.2))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.Seated)
    end)
    local sitStart = tick()
    repeat
        task.wait()
        if tick() - sitStart > 10 then return end
    until humanoid.Sit
    for _, part in ipairs(boat:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
            pcall(function() part:SetNetworkOwner(nil) end)
        end
    end
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then part.CanCollide = false end
        end
    end)
    local lastUpdate = tick()
    local updateInterval = 0.05
    local startTime = tick()
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
        local newTargetHRP = targetCharacter:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetCharacter:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then running = false return end
        if not myHRP or not humanoid then running = false return end
        if tick() - lastUpdate < updateInterval then return end
        lastUpdate = tick()
        local offset = Vector3.new(math.random(-10, 10), 0, math.random(-10, 10))
        pcall(function()
            local targetPosition = newTargetHRP.Position + offset
            boat:PivotTo(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 15000),
                    math.rad(Workspace.DistributedGameTime * 18000),
                    math.rad(Workspace.DistributedGameTime * 21000)
                )
            )
        end)
        local playerSeated = false
        for _, seat in ipairs(boat:GetDescendants()) do
            if (seat:IsA("Seat") or seat:IsA("VehicleSeat")) and seat.Name ~= "VehicleSeat" then
                if seat.Occupant == newTargetHumanoid then
                    playerSeated = true
                    break
                end
            end
        end
        if playerSeated or tick() - startTime > 10 then
            running = false
            if connection then connection:Disconnect() connection = nil end
            if flingConnection then flingConnection:Disconnect() flingConnection = nil end
            pcall(function()
                boat:PivotTo(CFrame.new(Vector3.new(-76.6, -401.97, -84.26)))
            end)
            task.wait(0.5)
            DisableCarClient()
            local args = { [1] = "DeleteAllVehicles" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
            end)
            if character then
                local myHRP = character:FindFirstChild("HumanoidRootPart")
                if myHRP and savedPosition then
                    pcall(function()
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                        task.wait(0.2)
                        myHRP.Velocity = Vector3.zero
                        myHRP.RotVelocity = Vector3.zero
                        myHRP.Anchored = false
                        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                    end)
                end
            end
            if character then
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                    end
                end
            end
            if humanoid then humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true) end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then seat.Disabled = false end
            end
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
            end)
            ShowNotification("Fling Barco", "Fling com barco conclu√≠do em " .. targetPlayer.Name, GetPlayerThumbnail(targetPlayer.UserId))
        end
    end)
end

local function FlingWithTruck(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then
        ShowNotification("Erro", "Jogador ou personagem n√£o encontrado!", nil)
        return
    end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then return end
    savedPosition = myHRP.Position
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1181.83, 76.08, -1158.83))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end)
    task.wait(0.5)
    DisableCarClient()
    local args = { [1] = "DeleteAllVehicles" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    args = { [1] = "PickingCar", [2] = "Truck" }
    pcall(function()
        ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
    end)
    task.wait(1)
    local vehiclesFolder = Workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then return end
    local truckName = LocalPlayer.Name .. "Car"
    local truck = vehiclesFolder:FindFirstChild(truckName)
    if not truck then return end
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1171.15, 79.45, -1166.2))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.Seated)
    end)
    local sitStart = tick()
    repeat
        task.wait()
        if tick() - sitStart > 10 then return end
    until humanoid.Sit
    for _, part in ipairs(truck:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
            pcall(function() part:SetNetworkOwner(nil) end)
        end
    end
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then part.CanCollide = false end
        end
    end)
    local lastUpdate = tick()
    local updateInterval = 0.05
    local startTime = tick()
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
        local newTargetHRP = targetCharacter:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetCharacter:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then running = false return end
        if not myHRP or not humanoid then running = false return end
        if tick() - lastUpdate < updateInterval then return end
        lastUpdate = tick()
        local offset = Vector3.new(math.random(-10, 10), 0, math.random(-10, 10))
        pcall(function()
            local targetPosition = newTargetHRP.Position + offset
            truck:PivotTo(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 15000),
                    math.rad(Workspace.DistributedGameTime * 18000),
                    math.rad(Workspace.DistributedGameTime * 21000)
                )
            )
        end)
        local playerSeated = false
        for _, seat in ipairs(truck:GetDescendants()) do
            if (seat:IsA("Seat") or seat:IsA("VehicleSeat")) and seat.Name ~= "VehicleSeat" then
                if seat.Occupant == newTargetHumanoid then
                    playerSeated = true
                    break
                end
            end
        end
        if playerSeated or tick() - startTime > 10 then
            running = false
            if connection then connection:Disconnect() connection = nil end
            if flingConnection then flingConnection:Disconnect() flingConnection = nil end
            pcall(function()
                truck:PivotTo(CFrame.new(Vector3.new(-76.6, -401.97, -84.26)))
            end)
            task.wait(0.5)
            DisableCarClient()
            local args = { [1] = "DeleteAllVehicles" }
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
            end)
            if character then
                local myHRP = character:FindFirstChild("HumanoidRootPart")
                if myHRP and savedPosition then
                    pcall(function()
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                        task.wait(0.2)
                        myHRP.Velocity = Vector3.zero
                        myHRP.RotVelocity = Vector3.zero
                        myHRP.Anchored = false
                        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                    end)
                end
            end
            if character then
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                    end
                end
            end
            if humanoid then humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true) end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then seat.Disabled = false end
            end
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
            end)
            ShowNotification("Fling Caminh√£o", "Fling com caminh√£o conclu√≠do em " .. targetPlayer.Name, GetPlayerThumbnail(targetPlayer.UserId))
        end
    end)
end

local function FlingAll()
    if not LocalPlayer.Character then
        ShowNotification("Erro", "Seu personagem n√£o foi encontrado!", nil)
        return
    end
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then
        ShowNotification("Erro", "Humanoid ou HumanoidRootPart n√£o encontrado!", nil)
        return
    end
    savedPosition = myHRP.Position
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then part.CanCollide = false end
        end
    end)
    local startTime = tick()
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        if not myHRP or not humanoid then
            running = false
            return
        end
        local players = Players:GetPlayers()
        for _, targetPlayer in ipairs(players) do
            if targetPlayer == LocalPlayer or table.find(excludedPlayers, targetPlayer.Name) then
                continue
            end
            if targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") and targetPlayer.Character:FindFirstChild("Humanoid") then
                local newTargetHRP = targetPlayer.Character.HumanoidRootPart
                local newTargetHumanoid = targetPlayer.Character.Humanoid
                pcall(function()
                    local targetPosition = newTargetHRP.Position
                    character:SetPrimaryPartCFrame(
                        CFrame.new(targetPosition) * CFrame.Angles(
                            math.rad(Workspace.DistributedGameTime * 20000),
                            math.rad(Workspace.DistributedGameTime * 22000),
                            math.rad(Workspace.DistributedGameTime * 24000)
                        )
                    )
                end)
                if newTargetHumanoid.Sit then
                    local walkFlingInstance = Instance.new("BodyVelocity")
                    walkFlingInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                    walkFlingInstance.Velocity = Vector3.new(math.random(-20, 20), 20, math.random(-20, 20)).Unit * 4000000 + Vector3.new(0, 3000000, 0)
                    walkFlingInstance.Parent = myHRP
                    pcall(function()
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(Vector3.new(-59599.73, 2040070.50, -293391.16))
                        myHRP.Anchored = false
                    end)
                    task.wait(0.5)
                    if walkFlingInstance then
                        walkFlingInstance:Destroy()
                    end
                end
            end
        end
        if tick() - startTime > 15 then
            running = false
            flingConnection:Disconnect()
            flingConnection = nil
            pcall(function()
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                task.wait(0.2)
                myHRP.Velocity = Vector3.zero
                myHRP.RotVelocity = Vector3.zero
                myHRP.Anchored = false
                humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
            end)
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                    part.Velocity = Vector3.zero
                    part.RotVelocity = Vector3.zero
                end
            end
            if humanoid then
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
            end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
                    seat.Disabled = false
                end
            end
            pcall(function()
                ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
            end)
            if connection then
                connection:Disconnect()
                connection = nil
            end
            ShowNotification("Fling All", "Fling em todos os jogadores conclu√≠do!", nil)
        end
    end)
end

TrollTab:AddButton({
    Name = "Fling",
    Description = "Inicia o fling com o m√©todo selecionado",
    Callback = function()
        if running or isFollowingKill or isFollowingPull then return end
        if not selectedPlayer or not selectedFlingMethod then
            ShowNotification("Erro", "Selecione um jogador e m√©todo primeiro!", nil)
            return
        end
        if selectedFlingMethod == "Sof√°" then
            FlingWithSofa(selectedPlayer)
        elseif selectedFlingMethod == "Bola" then
            FlingWithBall(selectedPlayer)
        elseif selectedFlingMethod == "Bola V2" then
            FlingWithBallV2(selectedPlayer)
        elseif selectedFlingMethod == "Barco" then
            FlingWithBoat(selectedPlayer)
        elseif selectedFlingMethod == "Caminh√£o" then
            FlingWithTruck(selectedPlayer)
        end
    end
})

TrollTab:AddButton({
    Name = "Fling All",
    Description = "Aplica fling em todos os jogadores",
    Callback = function()
        if running or isFollowingKill or isFollowingPull then return end
        FlingAll()
    end
})

TrollTab:AddButton({
    Name = "Parar Fling",
    Description = "Para qualquer fling em andamento",
    Callback = function()
        running = false
        isFollowingKill = false
        isFollowingPull = false
        if connection then
            connection:Disconnect()
            connection = nil
        end
        if flingConnection then
            flingConnection:Disconnect()
            flingConnection = nil
        end
        for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
                part.Velocity = Vector3.zero
                part.RotVelocity = Vector3.zero
            end
        end
        local myHumanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
        if myHumanoid then
            myHumanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        end
        for _, seat in ipairs(Workspace:GetDescendants()) do
            if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
                seat.Disabled = false
            end
        end
        if couch and originalProperties then
            couch.Anchored = originalProperties.Anchored
            couch.CanCollide = originalProperties.CanCollide
            couch.CanTouch = originalProperties.CanTouch
            couch = nil
            originalProperties = {}
        end
        if soccerBall and originalProperties then
            soccerBall.Anchored = originalProperties.Anchored
            soccerBall.CanCollide = originalProperties.CanCollide
            soccerBall.CanTouch = originalProperties.CanTouch
            soccerBall.Massless = originalProperties.Massless
            soccerBall = nil
            originalProperties = {}
        end
        if savedPosition then
            local myHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if myHRP then
                pcall(function()
                    myHRP.Anchored = true
                    myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                    task.wait(0.2)
                    myHRP.Velocity = Vector3.zero
                    myHRP.RotVelocity = Vector3.zero
                    myHRP.Anchored = false
                    myHumanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                end)
                savedPosition = nil
            end
        end
        DisableCarClient()
        local args = { [1] = "DeleteAllVehicles" }
        pcall(function()
            ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Ca1r"):FireServer(unpack(args))
        end)
        pcall(function()
            ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clea1rTool1s"):FireServer("PlayerWantsToDeleteTool", "SoccerBall")
            ReplicatedStorage:WaitForChild("RE"):WaitForChild("1Clea1rTool1s"):FireServer("PlayerWantsToDeleteTool", "Couch")
        end)
        ShowNotification("Parado", "Fling parado!", nil)
    end
})

TrollTab:AddSection({ "Excluir Jogadores do Fling All" })

local DropdownExcludePlayer = TrollTab:AddDropdown({
    Name = "Excluir Jogador do Fling All",
    Description = "Escolha jogadores para excluir do Fling All",
    Default = {},
    Multi = true,
    Options = GetPlayerNames(),
    Callback = function(value)
        excludedPlayers = {}
        for playerName, _ in pairs(value) do
            table.insert(excludedPlayers, playerName)
        end
    end
})

Players.PlayerAdded:Connect(function() task.wait(1) UpdateDropdown(DropdownExcludePlayer, nil) end)
Players.PlayerRemoving:Connect(function(player)
    UpdateDropdown(DropdownExcludePlayer, nil)
    if table.find(excludedPlayers, player.Name) then
        table.remove(excludedPlayers, table.find(excludedPlayers, player.Name))
        DropdownExcludePlayer:Set(excludedPlayers)
    end
end)

-- === Teleport Tab ===
TeleportTab:AddSection({ "Locais de Teleporte" })

local teleportLocations = {
    ["Hospital"] = CFrame.new(-650, 23, -110),
    ["Police Station"] = CFrame.new(-250, 25, 300),
    ["School"] = CFrame.new(200, 30, -400),
    ["Bank"] = CFrame.new(150, 25, 200),
    ["Fire Station"] = CFrame.new(-300, 25, -200),
    ["Park"] = CFrame.new(0, 20, 0)
}

for locationName, cframe in pairs(teleportLocations) do
    TeleportTab:AddButton({
        Name = "Teleportar para " .. locationName,
        Callback = function()
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CFrame = cframe
                ShowNotification("Teleportado", "Teleportado para " .. locationName .. "!", nil)
            else
                ShowNotification("Erro", "Personagem n√£o encontrado!", nil)
            end
        end
    })
end

-- === FE Tab ===
FETab:AddSection({ "Efeitos Visuais (FE)" })

FETab:AddButton({
    Name = "Tornado FE",
    Description = "Cria um tornado visual (FE)",
    Callback = function()
        local success, errorMessage = pcall(function()
            local tornado = Instance.new("Part")
            tornado.Size = Vector3.new(10, 20, 10)
            tornado.Anchored = true
            tornado.CanCollide = false
            tornado.Transparency = 0.5
            tornado.BrickColor = BrickColor.new("Light blue")
            tornado.Position = LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, 10, 0)
            tornado.Parent = Workspace
            local tweenInfo = TweenInfo.new(5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
            local tween = TweenService:Create(tornado, tweenInfo, { CFrame = tornado.CFrame * CFrame.Angles(0, math.rad(360), 0) })
            tween:Play()
            task.wait(10)
            tween:Cancel()
            tornado:Destroy()
        end)
        if not success then
            ShowNotification("Erro", "Falha ao criar tornado: " .. tostring(errorMessage), nil)
        else
            ShowNotification("Sucesso", "Tornado FE criado!", nil)
        end
    end
})

-- === Protection Tab ===
ProtectionTab:AddSection({ "Prote√ß√µes" })

ProtectionTab:AddToggle({
    Name = "Anti-Kick",
    Description = "Impede kick do servidor",
    Default = false,
    Callback = function(state)
        if state then
            local mt = getrawmetatable(game)
            setreadonly(mt, false)
            local oldIndex = mt.__index
            mt.__index = function(self, key)
                if key == "Kick" then
                    return function() end
                end
                return oldIndex(self, key)
            end
            setreadonly(mt, true)
            ShowNotification("Anti-Kick", "Anti-Kick ativado!", nil)
        else
            local mt = getrawmetatable(game)
            setreadonly(mt, false)
            mt.__index = rawget(mt, "__index") or function(self, key) return game[key] end
            setreadonly(mt, true)
            ShowNotification("Anti-Kick", "Anti-Kick desativado!", nil)
        end
    end
})

ProtectionTab:AddToggle({
    Name = "Anti-Ban",
    Description = "Tenta prevenir bans",
    Default = false,
    Callback = function(state)
        if state then
            local oldNamecall
            oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
                local method = getnamecallmethod()
                if method == "Ban" or method == "Kick" then
                    return
                end
                return oldNamecall(self, ...)
            end)
            ShowNotification("Anti-Ban", "Anti-Ban ativado!", nil)
        else
            ShowNotification("Anti-Ban", "Anti-Ban desativado!", nil)
        end
    end
})

-- Notifica√ß√£o inicial

ShowNotification("Lynix Hub", "Script carregado com sucesso! Vers√£o 4.0", "rbxassetid://92938877761950")
